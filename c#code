using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Welcome to Blackjack! No Aces or Wilds! Type 1 to HIT and 2 to STAY");
            var usedCards = new List<Dictionary<int, string>>(); 
            try
            {
                //If user is still under 21 after 5 iterations (i.e. 5 drawn cards), they automatically win
                for (int i = 0; i <= 5; i++)
                {
                    //draw initial card
                    int totalCount = 0;
                    if (i == 5) { Console.WriteLine("You have exceeded five cards. Congrats! You win!"); break; }
                    Console.WriteLine("Would you like to hit or stay?"); var answer = Console.ReadLine();
                    //Determinng whether the user hits or stays and calculating total
                    if (answer == "2") { compareScores(usedCards); break;} else if (answer == "1") { checkIfNewOrUsedCard(ref usedCards); }
                    usedCards.ForEach(x => x.ToList().ForEach(zr => totalCount += zr.Key));
                    if (totalCount > 21) { Console.WriteLine("You've gone over 21! You Lose!"); break; }
                    Console.WriteLine("Your total count is up to " + totalCount.ToString());
                }
                var unecessaryVariable = Console.ReadLine();
            }
            catch(Exception ex)
            {
                Console.WriteLine("Something went wrong in the calculation: " + ex.Message);
                //ex.Log to database
                //Release any hung object memory and collect garbage- method to release any memory from datatable, lists, etc.
                //release any hung threads or garbage depending on the generation of the object
             }
            }
        private static void compareScores(List<Dictionary<int,string>> usedCards)
        {
            Random dealersRandomNum = new Random(); int userScore = 0; int dealerScore = dealersRandomNum.Next(1, 21);
            usedCards.ForEach(x => x.ToList().ForEach(zr => userScore += zr.Key));
            Console.WriteLine("Your score is " + userScore.ToString() + "!. The dealer's score is " + dealerScore.ToString());
        }
        
        private static void checkIfNewOrUsedCard(ref List<Dictionary<int, string>> usedCards )
        {
            //Check if nextDrawnCard has already been added to usedCards
            for (int i = 0; i < 1000; i++) {
                var nextDrawnCard = drawCard();
                if (!usedCards.Contains(nextDrawnCard))  {
                    usedCards.Add(nextDrawnCard);
                    Console.WriteLine(nextDrawnCard.First().Key.ToString() + " of " + nextDrawnCard.First().Value.ToString());break; }  
                }
        }
        private static Dictionary<int, string> drawCard()
        {
            //This function returns a card with the card number and selected suite. I.e. 9 of Hearts
            Random rndomSelection = new Random();
            var suite = new List<string> { "Hearts", "Clubs", "Spades", "Diamonds" };
            var card = new Dictionary<int, string>(); card.Add(rndomSelection.Next(1, 10), suite[rndomSelection.Next(suite.Count)]);
            return card;
        }
    }
}
